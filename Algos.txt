1 LRU cache  
2 Find Island in matrix
3 Create an elevator system
4 stock price - best time to buy in and sell.  
5 Linked List Sum
6 Rotate Matrix
7 Implement a HashTable
8 How do you find a specific element in a rotated sorted array in one pass?  
9 Given a list of number, return all subsets of the list.    
10 TimeCard Problem
11 Ransom note
12 Brackets problem ( Stack push & pop )
13 Token Problem ( Given an expression, eval the expression and print the result )
14 matchstr: a(3)b(3) means {“ab”,“aab”,“aaab”,“aabbb”... etc.. }
15 Given a message “one two three four five six seven eight nine”, chop it in chunks of buffers
16 Alien Dictionary
17 Trie
18 Validate Sudoku
19 Find the k smallest values in a binary search tree
20 Sparse vectors & their dot product (AFAIK)

Dynamic Programming:
1 Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.


Longest Palindrome

Median of k unsorted arrays
Design of a task scheduler
Print string into different lines while each line has a fixed width.


Given an input string of numbers like 121, find all permutations of that number in the same order for the corresponding letters for each number so 121 => 1 2 1, 12 1, and 1 21 which is ABA, LA, and AT  

Given an array of Ints find a maximum sum of non adjacent elements.
for ex. arr = [1,0,3,9,2] then ans would be 10 = 1 + 9 (non adjacent element)  

Given a string A and B, find the smallest substring of A that contains all the characters from B. (implement solution in O(n), keep in mind chars in B can repeat)

Write a function that returns values randomly, according to their weight.

input a list of array [[1, 2, 3], [1], [1, 2]] return the list of array, each array is a combination of one element in each array.
[[1, 1, 1], [1, 1, 2], [2, 1, 1], [2, 1, 2], [3, 1, 1], [3, 1, 2]]
Followup: each array in the input list is an iterator, which can only be looped once.  

Interview Questions
1. Text Justification
3. Bipartite graph check